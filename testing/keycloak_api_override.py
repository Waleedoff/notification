from typing import List, Optional

from app.common.exceptions import EmailOrPasswordIncorrect, RefreshTokenIncorrect
from app.common.schemas import RolesRequest
from app.common.utils import generate_random_uuid


class TestingKeycloakAdminApiService(object):
    def get_user(self, id: str):
        return {
            "id": f"{id}",
            "createdTimestamp": 1611200997802,
            "username": f"student_tester_{id[:4]}",
            "enabled": True,
            "totp": False,
            "emailVerified": True,
            "firstName": "سلمان",
            "lastName": "alghamdi",
            "email": f"example+{id[:4]}@example.com",
            "attributes": {
                "gender": ["Male"],
                "public_profile": ["false"],
                "mobile": ["538426700"],
                "mobile_verified": ["false"],
                "profile_complete": ["true"],
                "country_phone_code": ["+966"],
                "preferred_language": ["JavaScript"],
            },
            "disableableCredentialTypes": [],
            "requiredActions": [],
            "notBefore": 0,
            "access": {
                "manageGroupMembership": True,
                "view": True,
                "mapRoles": True,
                "impersonate": True,
                "manage": True,
            },
        }

    def update_user_email(self, user_id: str, new_email: str):
        """
        Test updating email successfully.
        """

        return {
            "user_id": f"{user_id}",
            "new_email": f"{new_email}"
        }

    def get_all_clients(self):
        return [
            {
                "id": "65b0a5ec-64f5-4d14-ae3e-d0f4e204f93c",
                "clientId": "vc",
                "surrogateAuthRequired": False,
                "enabled": True,
                "alwaysDisplayInConsole": False,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": ["*"],
                "webOrigins": ["*"],
                "notBefore": 0,
                "bearerOnly": False,
                "consentRequired": False,
                "standardFlowEnabled": True,
                "implicitFlowEnabled": False,
                "directAccessGrantsEnabled": True,
                "serviceAccountsEnabled": False,
                "publicClient": True,
                "frontchannelLogout": False,
                "protocol": "openid-connect",
                "attributes": {
                    "saml.assertion.signature": "false",
                    "id.token.as.detached.signature": "false",
                    "saml.multivalued.roles": "false",
                    "saml.force.post.binding": "false",
                    "saml.encrypt": "false",
                    "oauth2.device.authorization.grant.enabled": "false",
                    "backchannel.logout.revoke.offline.tokens": "false",
                    "saml.server.signature": "false",
                    "saml.server.signature.keyinfo.ext": "false",
                    "use.refresh.tokens": "true",
                    "exclude.session.state.from.auth.response": "false",
                    "oidc.ciba.grant.enabled": "false",
                    "saml.artifact.binding": "false",
                    "backchannel.logout.session.required": "true",
                    "client_credentials.use_refresh_token": "false",
                    "saml_force_name_id_format": "false",
                    "saml.client.signature": "false",
                    "tls.client.certificate.bound.access.tokens": "false",
                    "require.pushed.authorization.requests": "false",
                    "saml.authnstatement": "false",
                    "display.on.consent.screen": "false",
                    "saml.onetimeuse.condition": "false",
                },
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": True,
                "nodeReRegistrationTimeout": -1,
                "protocolMappers": [
                    {
                        "id": "56425430-368a-438d-b55d-c7d431c967d9",
                        "name": "roles",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-client-role-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "true",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "roles",
                            "jsonType.label": "String",
                            "usermodel.clientRoleMapping.clientId": "hu",
                        },
                    }
                ],
                "defaultClientScopes": ["web-origins", "roles", "profile", "email"],
                "optionalClientScopes": [
                    "address",
                    "phone",
                    "offline_access",
                    "microprofile-jwt",
                ],
                "access": {"view": True, "configure": True, "manage": True},
            },
            {
                "id": "2c720511-c069-4b4a-a1e8-e8b24d236248",
                "clientId": "mentoring",
                "rootUrl": "",
                "surrogateAuthRequired": False,
                "enabled": True,
                "alwaysDisplayInConsole": False,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": ["", "*"],
                "webOrigins": ["", "*"],
                "notBefore": 0,
                "bearerOnly": False,
                "consentRequired": False,
                "standardFlowEnabled": True,
                "implicitFlowEnabled": False,
                "directAccessGrantsEnabled": True,
                "serviceAccountsEnabled": False,
                "publicClient": True,
                "frontchannelLogout": False,
                "protocol": "openid-connect",
                "attributes": {
                    "saml.assertion.signature": "false",
                    "id.token.as.detached.signature": "false",
                    "saml.multivalued.roles": "false",
                    "saml.force.post.binding": "false",
                    "saml.encrypt": "false",
                    "oauth2.device.authorization.grant.enabled": "false",
                    "saml.server.signature": "false",
                    "backchannel.logout.revoke.offline.tokens": "false",
                    "saml.server.signature.keyinfo.ext": "false",
                    "use.refresh.tokens": "true",
                    "exclude.session.state.from.auth.response": "false",
                    "oidc.ciba.grant.enabled": "false",
                    "saml.artifact.binding": "false",
                    "backchannel.logout.session.required": "true",
                    "client_credentials.use_refresh_token": "false",
                    "saml_force_name_id_format": "false",
                    "saml.client.signature": "false",
                    "tls.client.certificate.bound.access.tokens": "false",
                    "require.pushed.authorization.requests": "false",
                    "saml.authnstatement": "false",
                    "display.on.consent.screen": "false",
                    "saml.onetimeuse.condition": "false",
                },
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": True,
                "nodeReRegistrationTimeout": -1,
                "protocolMappers": [
                    {
                        "id": "efeddd49-6ad9-4c8e-ba4d-2b7914613262",
                        "name": "sites",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "false",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "sites",
                            "jsonType.label": "String",
                        },
                    },
                    {
                        "id": "c5237a00-d3ea-4e87-9caf-5146b02d1a15",
                        "name": "DOB",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": False,
                        "config": {
                            "userinfo.token.claim": "true",
                            "user.attribute": "DOB",
                            "id.token.claim": "true",
                            "access.token.claim": "true",
                            "claim.name": "DOB",
                            "jsonType.label": "String",
                        },
                    },
                    {
                        "id": "239e153c-4d52-4eed-a237-26bcaf7b7426",
                        "name": "roles",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-client-role-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "true",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "roles",
                            "jsonType.label": "String",
                            "usermodel.clientRoleMapping.clientId": "mentoring",
                        },
                    },
                ],
                "defaultClientScopes": ["roles", "profile", "email"],
                "optionalClientScopes": [
                    "address",
                    "phone",
                    "offline_access",
                    "microprofile-jwt",
                ],
                "access": {"view": True, "configure": True, "manage": True},
            },
            {
                "id": "cb47214e-7dce-4891-b017-9f41c91a278b",
                "clientId": "permission",
                "rootUrl": "",
                "surrogateAuthRequired": False,
                "enabled": True,
                "alwaysDisplayInConsole": False,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": ["*", ""],
                "webOrigins": ["", "*"],
                "notBefore": 0,
                "bearerOnly": False,
                "consentRequired": False,
                "standardFlowEnabled": True,
                "implicitFlowEnabled": False,
                "directAccessGrantsEnabled": True,
                "serviceAccountsEnabled": False,
                "publicClient": True,
                "frontchannelLogout": False,
                "protocol": "openid-connect",
                "attributes": {
                    "saml.assertion.signature": "false",
                    "id.token.as.detached.signature": "false",
                    "saml.multivalued.roles": "false",
                    "saml.force.post.binding": "false",
                    "saml.encrypt": "false",
                    "oauth2.device.authorization.grant.enabled": "false",
                    "saml.server.signature": "false",
                    "backchannel.logout.revoke.offline.tokens": "false",
                    "saml.server.signature.keyinfo.ext": "false",
                    "use.refresh.tokens": "true",
                    "exclude.session.state.from.auth.response": "false",
                    "oidc.ciba.grant.enabled": "false",
                    "saml.artifact.binding": "false",
                    "backchannel.logout.session.required": "true",
                    "client_credentials.use_refresh_token": "false",
                    "saml_force_name_id_format": "false",
                    "saml.client.signature": "false",
                    "tls.client.certificate.bound.access.tokens": "false",
                    "require.pushed.authorization.requests": "false",
                    "saml.authnstatement": "false",
                    "display.on.consent.screen": "false",
                    "saml.onetimeuse.condition": "false",
                },
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": True,
                "nodeReRegistrationTimeout": -1,
                "protocolMappers": [
                    {
                        "id": "37915a14-1919-4ab6-b293-61ed9c29f88a",
                        "name": "sites",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "false",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "sites",
                            "jsonType.label": "String",
                        },
                    },
                    {
                        "id": "25fc8056-862c-43f6-925d-9b2e0ac79e66",
                        "name": "roles",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-client-role-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "true",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "roles",
                            "jsonType.label": "String",
                            "usermodel.clientRoleMapping.clientId": "permission",
                        },
                    },
                ],
                "defaultClientScopes": ["roles", "profile", "email"],
                "optionalClientScopes": [
                    "address",
                    "phone",
                    "offline_access",
                    "microprofile-jwt",
                ],
                "access": {"view": True, "configure": True, "manage": True},
            },
            {
                "id": "a58966e0-b16a-4ab1-99a1-f711bc38853c",
                "clientId": "leaderboard",
                "rootUrl": "",
                "surrogateAuthRequired": False,
                "enabled": True,
                "alwaysDisplayInConsole": False,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": ["", "*"],
                "webOrigins": ["", "*"],
                "notBefore": 0,
                "bearerOnly": False,
                "consentRequired": False,
                "standardFlowEnabled": True,
                "implicitFlowEnabled": False,
                "directAccessGrantsEnabled": True,
                "serviceAccountsEnabled": False,
                "publicClient": True,
                "frontchannelLogout": False,
                "protocol": "openid-connect",
                "attributes": {
                    "saml.assertion.signature": "false",
                    "id.token.as.detached.signature": "false",
                    "saml.multivalued.roles": "false",
                    "saml.force.post.binding": "false",
                    "saml.encrypt": "false",
                    "oauth2.device.authorization.grant.enabled": "false",
                    "saml.server.signature": "false",
                    "backchannel.logout.revoke.offline.tokens": "false",
                    "saml.server.signature.keyinfo.ext": "false",
                    "use.refresh.tokens": "true",
                    "exclude.session.state.from.auth.response": "false",
                    "oidc.ciba.grant.enabled": "false",
                    "saml.artifact.binding": "false",
                    "backchannel.logout.session.required": "true",
                    "client_credentials.use_refresh_token": "false",
                    "saml_force_name_id_format": "false",
                    "saml.client.signature": "false",
                    "tls.client.certificate.bound.access.tokens": "false",
                    "require.pushed.authorization.requests": "false",
                    "saml.authnstatement": "false",
                    "display.on.consent.screen": "false",
                    "saml.onetimeuse.condition": "false",
                },
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": True,
                "nodeReRegistrationTimeout": -1,
                "protocolMappers": [
                    {
                        "id": "2d63306c-0f07-4390-9d0d-e95141fec5cc",
                        "name": "sites",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "false",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "sites",
                            "jsonType.label": "String",
                        },
                    },
                    {
                        "id": "38868353-caab-4ccc-bbf4-c08418739656",
                        "name": "roles",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-client-role-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "true",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "roles",
                            "jsonType.label": "String",
                            "usermodel.clientRoleMapping.clientId": "leaderboard",
                        },
                    },
                ],
                "defaultClientScopes": ["roles", "profile", "email"],
                "optionalClientScopes": [
                    "address",
                    "phone",
                    "offline_access",
                    "microprofile-jwt",
                ],
                "access": {"view": True, "configure": True, "manage": True},
            },
            {
                "id": "71fccb5f-d4ee-4243-ba80-b1cd511c3f1c",
                "clientId": "satr",
                "rootUrl": "",
                "surrogateAuthRequired": False,
                "enabled": True,
                "alwaysDisplayInConsole": False,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": [""],
                "webOrigins": [""],
                "notBefore": 0,
                "bearerOnly": False,
                "consentRequired": False,
                "standardFlowEnabled": True,
                "implicitFlowEnabled": False,
                "directAccessGrantsEnabled": False,
                "serviceAccountsEnabled": False,
                "publicClient": False,
                "frontchannelLogout": False,
                "protocol": "openid-connect",
                "attributes": {},
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": True,
                "nodeReRegistrationTimeout": -1,
                "protocolMappers": [
                    {
                        "id": "f3c6b6b4-02e2-42ae-91a5-0c64de9f5dc2",
                        "name": "roles",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-client-role-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "true",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "roles",
                            "jsonType.label": "String",
                            "usermodel.clientRoleMapping.clientId": "satr",
                        },
                    },
                    {
                        "id": "bafae5e3-b2dd-4598-8c1e-8dce6179157b",
                        "name": "sites",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "false",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "sites",
                            "jsonType.label": "String",
                        },
                    },
                ],
                "defaultClientScopes": ["roles", "profile", "email"],
                "optionalClientScopes": [
                    "address",
                    "phone",
                    "offline_access",
                    "microprofile-jwt",
                ],
                "access": {"view": True, "configure": True, "manage": True},
            },
            {
                "id": "a8f4dac5-6e4a-4b87-867d-0c1bfca003e8",
                "clientId": "satr_admin",
                "rootUrl": "",
                "surrogateAuthRequired": False,
                "enabled": True,
                "alwaysDisplayInConsole": False,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": [""],
                "webOrigins": [""],
                "notBefore": 0,
                "bearerOnly": False,
                "consentRequired": False,
                "standardFlowEnabled": True,
                "implicitFlowEnabled": False,
                "directAccessGrantsEnabled": False,
                "serviceAccountsEnabled": False,
                "publicClient": False,
                "frontchannelLogout": False,
                "protocol": "openid-connect",
                "attributes": {},
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": True,
                "nodeReRegistrationTimeout": -1,
                "protocolMappers": [
                    {
                        "id": "dba36465-9b7f-49be-9e60-a72a747e9c39",
                        "name": "roles",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-client-role-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "true",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "roles",
                            "jsonType.label": "String",
                            "usermodel.clientRoleMapping.clientId": "satr_admin",
                        },
                    },
                    {
                        "id": "58e66baa-44d9-4030-85f1-222896946c20",
                        "name": "sites",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "false",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "sites",
                            "jsonType.label": "String",
                        },
                    },
                ],
                "defaultClientScopes": ["roles", "profile", "email"],
                "optionalClientScopes": [
                    "address",
                    "phone",
                    "offline_access",
                    "microprofile-jwt",
                ],
                "access": {"view": True, "configure": True, "manage": True},
            },
            {
                "id": "a8da7165-ff06-4fd7-8800-5215cec0fb44",
                "clientId": "initiatives",
                "rootUrl": "",
                "surrogateAuthRequired": False,
                "enabled": True,
                "alwaysDisplayInConsole": False,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": [""],
                "webOrigins": [],
                "notBefore": 0,
                "bearerOnly": False,
                "consentRequired": False,
                "standardFlowEnabled": True,
                "implicitFlowEnabled": False,
                "directAccessGrantsEnabled": False,
                "serviceAccountsEnabled": False,
                "publicClient": False,
                "frontchannelLogout": False,
                "protocol": "openid-connect",
                "attributes": {},
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": True,
                "nodeReRegistrationTimeout": -1,
                "protocolMappers": [
                    {
                        "id": "c8e9172c-b537-41cf-aa8e-ce8bc234485f",
                        "name": "roles",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-client-role-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "true",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "roles",
                            "jsonType.label": "String",
                            "usermodel.clientRoleMapping.clientId": "initiatives",
                        },
                    },
                    {
                        "id": "7553bd52-3d0d-4921-99c5-f84ebbbe5347",
                        "name": "sites",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "false",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "sites",
                            "jsonType.label": "String",
                        },
                    },
                ],
                "defaultClientScopes": ["roles", "profile", "email"],
                "optionalClientScopes": [
                    "address",
                    "phone",
                    "offline_access",
                    "microprofile-jwt",
                ],
                "access": {"view": True, "configure": True, "manage": True},
            },
            {
                "id": "cf8a37df-774d-4984-8f2d-f0c4e7f48b28",
                "clientId": "hu",
                "surrogateAuthRequired": False,
                "enabled": True,
                "alwaysDisplayInConsole": False,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": ["*"],
                "webOrigins": ["*"],
                "notBefore": 0,
                "bearerOnly": False,
                "consentRequired": False,
                "standardFlowEnabled": True,
                "implicitFlowEnabled": False,
                "directAccessGrantsEnabled": True,
                "serviceAccountsEnabled": False,
                "publicClient": True,
                "frontchannelLogout": False,
                "protocol": "openid-connect",
                "attributes": {
                    "saml.assertion.signature": "false",
                    "id.token.as.detached.signature": "false",
                    "saml.multivalued.roles": "false",
                    "saml.force.post.binding": "false",
                    "saml.encrypt": "false",
                    "oauth2.device.authorization.grant.enabled": "false",
                    "backchannel.logout.revoke.offline.tokens": "false",
                    "saml.server.signature": "false",
                    "saml.server.signature.keyinfo.ext": "false",
                    "use.refresh.tokens": "true",
                    "exclude.session.state.from.auth.response": "false",
                    "oidc.ciba.grant.enabled": "false",
                    "saml.artifact.binding": "false",
                    "backchannel.logout.session.required": "true",
                    "client_credentials.use_refresh_token": "false",
                    "saml_force_name_id_format": "false",
                    "saml.client.signature": "false",
                    "tls.client.certificate.bound.access.tokens": "false",
                    "require.pushed.authorization.requests": "false",
                    "saml.authnstatement": "false",
                    "display.on.consent.screen": "false",
                    "saml.onetimeuse.condition": "false",
                },
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": True,
                "nodeReRegistrationTimeout": -1,
                "protocolMappers": [
                    {
                        "id": "f2dcb013-ae69-46d7-996c-856727578223",
                        "name": "roles",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-client-role-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "true",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "roles",
                            "jsonType.label": "String",
                            "usermodel.clientRoleMapping.clientId": "hu",
                        },
                    },
                    {
                        "id": "15e6c1be-11fc-4b5d-bbe1-f063b30cc987",
                        "name": "Preferred_language_mapper",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": False,
                        "config": {
                            "userinfo.token.claim": "false",
                            "user.attribute": "preferred_language",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "preferred_language",
                            "jsonType.label": "String",
                        },
                    },
                    {
                        "id": "753175bf-0f24-4d57-a4d3-8f6b156039cd",
                        "name": "sites",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "false",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "sites",
                            "jsonType.label": "String",
                        },
                    },
                ],
                "defaultClientScopes": ["web-origins", "roles", "profile", "email"],
                "optionalClientScopes": [
                    "address",
                    "phone",
                    "offline_access",
                    "microprofile-jwt",
                ],
                "access": {"view": True, "configure": True, "manage": True},
            },
            {
                "id": "fadbccab-4cd9-40aa-8569-f99d207e72dd",
                "clientId": "accreditation",
                "surrogateAuthRequired": False,
                "enabled": True,
                "alwaysDisplayInConsole": False,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": ["*"],
                "webOrigins": ["+"],
                "notBefore": 0,
                "bearerOnly": False,
                "consentRequired": False,
                "standardFlowEnabled": True,
                "implicitFlowEnabled": False,
                "directAccessGrantsEnabled": True,
                "serviceAccountsEnabled": False,
                "publicClient": True,
                "frontchannelLogout": False,
                "protocol": "openid-connect",
                "attributes": {
                    "saml.assertion.signature": "false",
                    "id.token.as.detached.signature": "false",
                    "saml.multivalued.roles": "false",
                    "saml.force.post.binding": "false",
                    "saml.encrypt": "false",
                    "oauth2.device.authorization.grant.enabled": "false",
                    "backchannel.logout.revoke.offline.tokens": "false",
                    "saml.server.signature": "false",
                    "saml.server.signature.keyinfo.ext": "false",
                    "use.refresh.tokens": "true",
                    "exclude.session.state.from.auth.response": "false",
                    "oidc.ciba.grant.enabled": "false",
                    "saml.artifact.binding": "false",
                    "backchannel.logout.session.required": "true",
                    "client_credentials.use_refresh_token": "false",
                    "saml_force_name_id_format": "false",
                    "saml.client.signature": "false",
                    "tls.client.certificate.bound.access.tokens": "false",
                    "require.pushed.authorization.requests": "false",
                    "saml.authnstatement": "false",
                    "display.on.consent.screen": "false",
                    "saml.onetimeuse.condition": "false",
                },
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": True,
                "nodeReRegistrationTimeout": -1,
                "protocolMappers": [
                    {
                        "id": "704bc881-77f9-4ff0-b1b4-e5f6ca7b850c",
                        "name": "roles",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-client-role-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "true",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "roles",
                            "jsonType.label": "String",
                            "usermodel.clientRoleMapping.clientId": "accreditation",
                        },
                    },
                    {
                        "id": "2a32534a-f8ab-473d-a007-97a4d39aec37",
                        "name": "sites",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "false",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "sites",
                            "jsonType.label": "String",
                        },
                    },
                ],
                "defaultClientScopes": ["web-origins", "roles", "profile", "email"],
                "optionalClientScopes": [
                    "address",
                    "phone",
                    "offline_access",
                    "microprofile-jwt",
                ],
                "access": {"view": True, "configure": True, "manage": True},
            },
            {
                "id": "3d99bb31-72e4-4902-8d44-45ccd9d49454",
                "clientId": "hiring",
                "surrogateAuthRequired": False,
                "enabled": True,
                "alwaysDisplayInConsole": False,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": ["*"],
                "webOrigins": ["*"],
                "notBefore": 0,
                "bearerOnly": False,
                "consentRequired": False,
                "standardFlowEnabled": True,
                "implicitFlowEnabled": False,
                "directAccessGrantsEnabled": True,
                "serviceAccountsEnabled": False,
                "publicClient": True,
                "frontchannelLogout": False,
                "protocol": "openid-connect",
                "attributes": {
                    "saml.assertion.signature": "false",
                    "id.token.as.detached.signature": "false",
                    "saml.multivalued.roles": "false",
                    "saml.force.post.binding": "false",
                    "saml.encrypt": "false",
                    "oauth2.device.authorization.grant.enabled": "false",
                    "backchannel.logout.revoke.offline.tokens": "false",
                    "saml.server.signature": "false",
                    "saml.server.signature.keyinfo.ext": "false",
                    "use.refresh.tokens": "true",
                    "exclude.session.state.from.auth.response": "false",
                    "oidc.ciba.grant.enabled": "false",
                    "saml.artifact.binding": "false",
                    "backchannel.logout.session.required": "true",
                    "client_credentials.use_refresh_token": "false",
                    "saml_force_name_id_format": "false",
                    "saml.client.signature": "false",
                    "tls.client.certificate.bound.access.tokens": "false",
                    "require.pushed.authorization.requests": "false",
                    "saml.authnstatement": "false",
                    "display.on.consent.screen": "false",
                    "saml.onetimeuse.condition": "false",
                },
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": True,
                "nodeReRegistrationTimeout": -1,
                "protocolMappers": [
                    {
                        "id": "571041b9-1b0c-4060-86d8-b5d61bf8146a",
                        "name": "sites",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "false",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "sites",
                            "jsonType.label": "String",
                        },
                    },
                    {
                        "id": "91843ff5-52d6-4279-a48b-cc8e30dfb5ee",
                        "name": "roles",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-client-role-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "true",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "roles",
                            "jsonType.label": "String",
                            "usermodel.clientRoleMapping.clientId": "hiring",
                        },
                    },
                ],
                "defaultClientScopes": ["web-origins", "roles", "profile", "email"],
                "optionalClientScopes": [
                    "address",
                    "phone",
                    "offline_access",
                    "microprofile-jwt",
                ],
                "access": {"view": True, "configure": True, "manage": True},
            },
            {
                "id": "0a31d4fd-5e7e-47de-b5ec-83fccf7d1910",
                "clientId": "lms",
                "surrogateAuthRequired": False,
                "enabled": True,
                "alwaysDisplayInConsole": False,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": ["*"],
                "webOrigins": ["*"],
                "notBefore": 0,
                "bearerOnly": False,
                "consentRequired": False,
                "standardFlowEnabled": True,
                "implicitFlowEnabled": False,
                "directAccessGrantsEnabled": True,
                "serviceAccountsEnabled": False,
                "publicClient": True,
                "frontchannelLogout": False,
                "protocol": "openid-connect",
                "attributes": {
                    "saml.assertion.signature": "false",
                    "id.token.as.detached.signature": "false",
                    "saml.multivalued.roles": "false",
                    "saml.force.post.binding": "false",
                    "saml.encrypt": "false",
                    "oauth2.device.authorization.grant.enabled": "false",
                    "backchannel.logout.revoke.offline.tokens": "false",
                    "saml.server.signature": "false",
                    "saml.server.signature.keyinfo.ext": "false",
                    "use.refresh.tokens": "true",
                    "exclude.session.state.from.auth.response": "false",
                    "oidc.ciba.grant.enabled": "false",
                    "saml.artifact.binding": "false",
                    "backchannel.logout.session.required": "true",
                    "client_credentials.use_refresh_token": "false",
                    "saml_force_name_id_format": "false",
                    "saml.client.signature": "false",
                    "tls.client.certificate.bound.access.tokens": "false",
                    "require.pushed.authorization.requests": "false",
                    "saml.authnstatement": "false",
                    "display.on.consent.screen": "false",
                    "saml.onetimeuse.condition": "false",
                },
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": True,
                "nodeReRegistrationTimeout": -1,
                "protocolMappers": [
                    {
                        "id": "91fe4a03-557d-45f3-ab98-d66d11a1e030",
                        "name": "sites",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "false",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "sites",
                            "jsonType.label": "String",
                        },
                    },
                    {
                        "id": "037388dd-043c-464f-a575-6ac7175b5de4",
                        "name": "roles",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-client-role-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "true",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "roles",
                            "jsonType.label": "String",
                            "usermodel.clientRoleMapping.clientId": "lms",
                        },
                    },
                ],
                "defaultClientScopes": ["web-origins", "roles", "profile", "email"],
                "optionalClientScopes": [
                    "address",
                    "phone",
                    "offline_access",
                    "microprofile-jwt",
                ],
                "access": {"view": True, "configure": True, "manage": True},
            },
            {
                "id": "2245c0f1-a6e4-4299-8dfa-cb5e839df7fa",
                "clientId": "profile",
                "rootUrl": "",
                "surrogateAuthRequired": False,
                "enabled": True,
                "alwaysDisplayInConsole": False,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": [""],
                "webOrigins": [""],
                "notBefore": 0,
                "bearerOnly": False,
                "consentRequired": False,
                "standardFlowEnabled": True,
                "implicitFlowEnabled": False,
                "directAccessGrantsEnabled": False,
                "serviceAccountsEnabled": False,
                "publicClient": False,
                "frontchannelLogout": False,
                "protocol": "openid-connect",
                "attributes": {},
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": True,
                "nodeReRegistrationTimeout": -1,
                "protocolMappers": [
                    {
                        "id": "37a83e9b-fcbd-4acf-9eaf-92652958e311",
                        "name": "roles",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-client-role-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "true",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "roles",
                            "jsonType.label": "String",
                            "usermodel.clientRoleMapping.clientId": "profile",
                        },
                    },
                    {
                        "id": "587e8cf2-c1f4-4701-8cab-8bb46516efc2",
                        "name": "sites",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "false",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "sites",
                            "jsonType.label": "String",
                        },
                    },
                ],
                "defaultClientScopes": ["roles", "profile", "email"],
                "optionalClientScopes": [
                    "address",
                    "phone",
                    "offline_access",
                    "microprofile-jwt",
                ],
                "access": {"view": True, "configure": True, "manage": True},
            },
            {
                "id": "05aca94c-2f93-489e-ad73-e7ec38d61f2d",
                "clientId": "notifications",
                "surrogateAuthRequired": False,
                "enabled": True,
                "alwaysDisplayInConsole": False,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": ["*"],
                "webOrigins": ["*"],
                "notBefore": 0,
                "bearerOnly": False,
                "consentRequired": False,
                "standardFlowEnabled": True,
                "implicitFlowEnabled": False,
                "directAccessGrantsEnabled": True,
                "serviceAccountsEnabled": False,
                "publicClient": True,
                "frontchannelLogout": False,
                "protocol": "openid-connect",
                "attributes": {
                    "saml.assertion.signature": "false",
                    "id.token.as.detached.signature": "false",
                    "saml.multivalued.roles": "false",
                    "saml.force.post.binding": "false",
                    "saml.encrypt": "false",
                    "oauth2.device.authorization.grant.enabled": "false",
                    "backchannel.logout.revoke.offline.tokens": "false",
                    "saml.server.signature": "false",
                    "saml.server.signature.keyinfo.ext": "false",
                    "use.refresh.tokens": "true",
                    "exclude.session.state.from.auth.response": "false",
                    "oidc.ciba.grant.enabled": "false",
                    "saml.artifact.binding": "false",
                    "backchannel.logout.session.required": "true",
                    "client_credentials.use_refresh_token": "false",
                    "saml_force_name_id_format": "false",
                    "saml.client.signature": "false",
                    "tls.client.certificate.bound.access.tokens": "false",
                    "require.pushed.authorization.requests": "false",
                    "saml.authnstatement": "false",
                    "display.on.consent.screen": "false",
                    "saml.onetimeuse.condition": "false",
                },
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": True,
                "nodeReRegistrationTimeout": -1,
                "protocolMappers": [
                    {
                        "id": "4f5a200f-d096-432a-8173-26eb74113e9d",
                        "name": "roles",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-client-role-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "true",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "roles",
                            "jsonType.label": "String",
                            "usermodel.clientRoleMapping.clientId": "notifications",
                        },
                    },
                    {
                        "id": "126d3b4b-ad35-4424-99b7-59d97200d47e",
                        "name": "sites",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "false",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "sites",
                            "jsonType.label": "String",
                        },
                    },
                ],
                "defaultClientScopes": ["web-origins", "roles", "profile", "email"],
                "optionalClientScopes": [
                    "address",
                    "phone",
                    "offline_access",
                    "microprofile-jwt",
                ],
                "access": {"view": True, "configure": True, "manage": True},
            },
            {
                "id": "5aba86cc-d2e6-4f27-8c39-3a7f37e98c00",
                "clientId": "athack",
                "rootUrl": "",
                "surrogateAuthRequired": False,
                "enabled": True,
                "alwaysDisplayInConsole": False,
                "clientAuthenticatorType": "client-secret",
                "redirectUris": [""],
                "webOrigins": [""],
                "notBefore": 0,
                "bearerOnly": False,
                "consentRequired": False,
                "standardFlowEnabled": True,
                "implicitFlowEnabled": False,
                "directAccessGrantsEnabled": False,
                "serviceAccountsEnabled": False,
                "publicClient": False,
                "frontchannelLogout": False,
                "protocol": "openid-connect",
                "attributes": {},
                "authenticationFlowBindingOverrides": {},
                "fullScopeAllowed": True,
                "nodeReRegistrationTimeout": -1,
                "protocolMappers": [
                    {
                        "id": "a8cc2bc1-47b9-452f-8b90-6779f7018853",
                        "name": "roles",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-client-role-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "true",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "roles",
                            "jsonType.label": "String",
                            "usermodel.clientRoleMapping.clientId": "athack",
                        },
                    },
                    {
                        "id": "23475c9b-36ed-4bee-81d4-a90ebc663617",
                        "name": "sites",
                        "protocol": "openid-connect",
                        "protocolMapper": "oidc-usermodel-attribute-mapper",
                        "consentRequired": False,
                        "config": {
                            "multivalued": "false",
                            "userinfo.token.claim": "false",
                            "id.token.claim": "false",
                            "access.token.claim": "true",
                            "claim.name": "sites",
                            "jsonType.label": "String",
                        },
                    },
                ],
                "defaultClientScopes": ["roles", "profile", "email"],
                "optionalClientScopes": [
                    "address",
                    "phone",
                    "offline_access",
                    "microprofile-jwt",
                ],
                "access": {"view": True, "configure": True, "manage": True},
            },
        ]

    def create_new_client(
        self, client_id: str, client_base_url: str, client_redirect_urls: List[str]
    ):
        return

    def get_users_count(
        self,
        email: Optional[str] = None,
        email_verified: Optional[bool] = None,
        first_name: Optional[str] = None,
        last_name: Optional[str] = None,
        search: Optional[str] = None,
        username: Optional[str] = None,
    ) -> int:
        return 0

    def get_users(
        self,
        brief_representation: bool = False,
        email: Optional[str] = None,
        email_verified: Optional[bool] = None,
        enabled: Optional[bool] = None,
        exact: Optional[bool] = None,
        first: Optional[int] = None,
        first_name: Optional[str] = None,
        idp_alias: Optional[str] = None,
        idp_user_id: Optional[str] = None,
        last_name: Optional[str] = None,
        max: int = 100,
        search: Optional[str] = None,
        username: Optional[str] = None,
    ) -> List[dict]:
        id = generate_random_uuid()
        return [
            {
                "id": id,
                "email": email,
                "username": username
            },
        ]

    def update_user(self, id: str, rep: dict):
        return None

    def create_user(self, rep: dict):
        return None

    def execute_actions_email(
        self,
        id: str,
        actions: List[str],
        client_id: Optional[str] = None,
        lifespan: Optional[str] = None,
        redirect_uri: Optional[str] = None,
    ):
        return None

    def send_verify_email(
        self,
        id: str,
        client_id: Optional[str] = None,
        redirect_uri: Optional[str] = None,
    ):
        return None

    def create_groups(
        self,
        name: str,
        roles: Optional[List[str]] = None,
        access: Optional[dict] = None,
        attributes: Optional[dict] = None,
        clientRoles: Optional[dict] = None,
        id: Optional[str] = None,
        subGroups: Optional[List[dict]] = None,
    ):
        return None

    def update_groups(
        self,
        name: str,
        id: str,
        roles: Optional[List[str]] = None,
        access: Optional[dict] = None,
        attributes: Optional[dict] = None,
        clientRoles: Optional[dict] = None,
        subGroups: Optional[List[dict]] = None,
    ):
        return None

    def get_group_by_id(
        self,
        id: str,
    ) -> dict:
        return {
            "id": f"{id}",
            "name": "group_test",
            "roles": ["garage_admins", "startup_admin"],
            "realmRoles": [],
            "clientRoles": {},
        }

    def delete_group_by_id(
        self,
        group_id: str,
    ):
        return None

    def delete_group(self, group_id: str):
        return None

    def get_groups(
        self,
        brief_representation: bool = True,
        first: Optional[int] = None,
        max: Optional[int] = None,
        search: Optional[str] = None,
    ) -> List[dict]:
        groups_list = [
            {
                "id": "2543ce46-d624-4699-a0b9-4f42e5d8d97d",
                "name": "VC_ADMIN",
                "path": "/VC_ADMIN",
                "subGroups": [],
            },
            {
                "id": "6763e9b6-750a-4b41-961d-d5226aad0e19",
                "name": "VC_JOBSEEKER",
                "path": "/VC_JOBSEEKER",
                "subGroups": [],
            },
            {
                "id": "6763e9b6-750a-4b41-961d-d5226aad0e29",
                "name": "VC_COMPANY",
                "path": "/VC_COMPANY",
                "subGroups": [],
            },
        ]
        if search is not None:
            result = next(
                ([group] for group in groups_list if group["name"] == search), None
            )
            if result is None:
                assert (
                    False
                ), "make sure to add the group to keycloak_admin_api_override file"
            return result

        return groups_list

    def add_roles_to_group(
        self,
        group_id: str,
        roles_request: "RolesRequest",
        client_id_uuid: str | None = None,
    ):
        return None

    def remove_roles_from_group(
        self,
        group_id: str,
        roles_request: "RolesRequest",
        client_id_uuid: str | None = None,
    ):
        return None

    def list_available_roles(self, group_id: str):
        return [
            {
                "id": "41f58be7-ef92-4cd9-b81f-90604bff82cf",
                "name": "admin",
                "description": "",
                "composite": False,
                "clientRole": False,
                "containerId": "main",
            },
            {
                "id": "77c9c3fa-1be6-4564-a547-a975a39b2733",
                "name": "accreditation:project:delete",
                "composite": False,
                "clientRole": False,
                "containerId": "main",
            },
        ]

    def create_realm_role(
        self,
        name: Optional[str] = None,
        attributes: Optional[dict] = None,
        clientRole: Optional[bool] = None,
        composite: Optional[bool] = None,
        composites: Optional[dict] = None,
        containerId: Optional[str] = None,
        description: Optional[str] = None,
        id: Optional[str] = None,
    ) -> None:
        return None

    def join_group(self, id: str, group_id: str):
        return None

    def remove_membership(self, id: str, group_id: str):
        return None

    def get_realm_role(
        self,
        brief_representation: bool = True,
        first: Optional[int] = None,
        max: Optional[int] = None,
        search: Optional[str] = None,
    ):
        return [
            {
                "id": "02f5adb7-916c-4763-bf5f-3c92b0abc594",
                "name": "hu_admin",
                "description": "hu admin he can create",
                "composite": False,
                "clientRole": False,
                "containerId": "main",
            }
        ]

    def create_client_roles_protocol_mapper(self, client_id: str, client_scope_id: str):
        return

    def get_group_members(
        self,
        id: str,
        brief_representation: bool = True,
        first: Optional[int] = None,
        max: Optional[int] = None,
    ):
        return

    def create_client_role(
        self,
        client_id_uuid: str,
        name: Optional[str] = None,
        attributes: Optional[dict] = None,
        clientRole: Optional[bool] = None,
        composite: Optional[bool] = None,
        composites: Optional[dict] = None,
        containerId: Optional[str] = None,
        description: Optional[str] = None,
        id: Optional[str] = None,
    ) -> None:
        return

    def get_clients_roles(
        self,
        client_id_uuid: str,
        brief_representation: bool = True,
        first: Optional[int] = None,
        max: Optional[int] = None,
        search: Optional[str] = None,
    ):
        return []

    def user_login(
        self,
        username: str,
        password: str,
        timeout: float = 1,
        remember_me: bool | None = False,
    ):
        if username == "string2":
            raise EmailOrPasswordIncorrect
        user_date = self.get_users(username=username)
        if username != user_date[0].get("username", str):
            raise EmailOrPasswordIncorrect
        else:
            return {
                "access_token": "",
                "expires_in": 0,
                "refresh_expires_in": 0,
                "refresh_token": ""
            }

    def user_refresh_token(
        self, refresh_token: str
    ):
        if refresh_token != "":
            raise RefreshTokenIncorrect
        return {
            "access_token": "",
            "expires_in": 0,
            "refresh_expires_in": 0,
            "refresh_token": "",
            "new_refresh_token": "",
        }

    def change_password(self, user_id: str, password: str):
        return


testing_keycloak_admin_api_service = TestingKeycloakAdminApiService()


def get_test_keycloak_api_service():
    return TestingKeycloakAdminApiService()
